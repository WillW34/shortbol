@prefix sbol

ComponentInstance(type, def)
(
  Identified(type)
  definition = def
  access = sbol.public
)

PrivateComponentInstance(type, def)
(
  Identified(type)
  definition = def
  access = sbol.private
)

Component(def) 
(
  ComponentInstance(Component, def)
)

MapsTo(local, remote, ref)
(
  Identified(MapsTo)
  sbol.<local> = local
  sbol.<remote> = remote
  refinement = ref
)

MapsUseRemote(local, remote) 
(
  MapsTo(local, remote, sbol.useRemote)
)

MapsUseLocal(local, remote)  
(
  MapsTo(local, remote, sbol.useLocal)
)

MapsIdentical(local, remote) 
(
  MapsTo(local, remote, sbol.verifyIdentical)
)

MapsMerge(local, remote)     
(
  MapsTo(local, remote, sbol.merge)
)

SequenceAnnotation(location)
(
  TopLevel(SequenceAnnotation)
  sbol.<location> = location
)


inline = <http://sbols.org/v2#inline>
reverseComplement = <http://sbols.org/v2#reverseComplement>

Location(type,orientation) 
(
  TopLevel(type)
  sbol.<orientation> = orientation
)


Range(start, end, orientation)
(
  Location(Range,orientation)
  sbol.<start> = start
  sbol.<end> = end
)

InlineRange(start, end)
(
  Range(start, end, inline)
)

ReverseComplementRange(start,end)
(
  Range(start,end,reverseComplement)
)

InlineCut(at,orientation)
(
  Location(Cut,inline)
  sbol.<at> = at
)

ReverseComplementCut(at,orientation)
(
  Location(Cut,reverseComplement)
  sbol.<at> = at
)

GenericLocation(orientation) 
(
  Location(GenericLocation,orientation)
)

InlineGenericLocation(at,orientation)
(
  GenericLocation(inline)
)

ReverseComplementGenericLocation(at,orientation)
(
  GenericLocation(reverseComplement)
)

SequenceConstraint(subject, object, restriction)
(
  TopLevel(SequenceConstraint)
  sbol.<subject> = subject
  sbol.<object> = object
  sbol.<restriction> = restriction
)

Precedes(subject, object)              
(
  SequenceConstraint(subject, object, sbol.precedes)
)

SameOrientationAs(subject, object)     
(
  SequenceConstraint(subject, object, sbol.sameOrientationAs)
)

OppositeOrientationAs(subject, object) 
(
  SequenceConstraint(subject, object, sbol.oppositeOrientationAs)
)

differentFrom(subject, object)         
(
  SequenceConstraint(subject, object, sbol.differentFrom)
)