@prefix sbol_2

# -- docs-family Layer 1 start --
# Name: Interaction
# Summary: How FunctionalComponents interact with one another within a design. 
# Description: A description of how FunctionalComponents within a design interact/work together. Uses Participation objects as an intermediate template to describe the role of each input/output.
# Usage: Given participant templates assign to the interaction properties of ModuleDefinition.
# Parameters: Identifier - type - Describes the behavior represented by the Interaction. 
# Optional-Parameters: optional-n (participations): each of which identifies the roles that its referenced FunctionalComponent plays in the Interaction.
# -- docs-family end --

# Interaction Templates
Interaction(type)
(
  Identified(Interaction)
  sbol_2.<type> = type
)

Inhibition()
(
  Interaction(i_inhibition)
)

Stimulation()
(
  Interaction(i_stimulation)
)

BiochemicalReaction()
(
  Interaction(i_biochemical_reaction)
)

NoncovalentBonding()
(
    Interaction(i_noncovalent_bonding)
)

Degradation()
(
  Interaction(i_degradation)
)

GeneticProduction()
(
  Interaction(i_genetic_production)
)

Control()
(
  Interaction(i_control)
)

# -- docs-family Layer 2 start --
# Name: interaction
# Summary: How parts interact with one another within a design.
# Description: a Description of how Instances of parts(ComponentDefinitions) interact with one another within a design. It is espciaially advised to use Specialised Templates here if possible.
# Usage: Given instances Of (functionalComponent) ComponentDefinitions define the interaction inside a ModuleDefinition.
# Parameters: Template - functionalComponent - Instance of the ComponentDefinition that are part of the interactions, Identifier - type - type of interaction.
# -- docs-family end --

interaction_1(functionalComponent, part_type, type)
(
  sbol_2.<functionalComponent> = functionalComponent
  
  functionalComponent._.type is a Interaction(type)
  (
    functionalComponent._.part_type is a Participation(functionalComponent, part_type)
    participation = functionalComponent._.part_type 
  )
  interaction = functionalComponent._.type
)


interaction_2(functionalComponent_participant_1, part_1_type, functionalComponent_participant_2, part_2_type, type)
(

  sbol_2.<functionalComponent> = functionalComponent_participant_1
  sbol_2.<functionalComponent> = functionalComponent_participant_2
  
  functionalComponent_participant_1._.type._with_.functionalComponent_participant_2 is a Interaction(type)
  (
    self._.functionalComponent_participant_1._.part_1_type is a Participation(functionalComponent_participant_1, part_1_type)
    self._.functionalComponent_participant_2._.part_2_type is a Participation(functionalComponent_participant_2, part_2_type)

    participation = self._.functionalComponent_participant_1._.part_1_type
    participation = self._.functionalComponent_participant_2._.part_2_type
  )
  interaction = functionalComponent_participant_1._.type._with_.functionalComponent_participant_2
)

inhibition(functionalComponent_inhibitor, functionalComponent_inhibited)
(
  interaction_2(functionalComponent_inhibitor, i_inhibitor, functionalComponent_inhibited, i_inhibited, i_inhibition)
)


stimulation(functionalComponent_stimulator, functionalComponent_stimulated)
(
  interaction_2(functionalComponent_stimulator, i_stimulator, functionalComponent_stimulated, i_stimulated, i_stimulation)
)

nonCovalentBonding(functionalComponent_reactant_1, functionalComponent_reactant_2)
(
  interaction_2(functionalComponent_reactant_1, i_reactant, functionalComponent_reactant_2, i_reactant, i_noncovalent_bonding)
)

bioChemicalReaction(functionalComponent_reactant, functionalComponent_product)
(
  interaction_2(functionalComponent_reactant, i_reactant, functionalComponent_product, i_product, i_biochemical_reaction)
)

geneticProduction(functionalComponent_promoter, functionalComponent_product)
(
  interaction_2(functionalComponent_promoter, i_promoter, functionalComponent_product, i_product, i_genetic_production)
)

degradation(functionalComponent_reactant)
(
  interaction_1(functionalComponent_reactant, i_reactant, i_degradation)
)

control(functionalComponent_modifier, functionalComponent_modified)
(
  interaction_2(functionalComponent_modifier, i_template, functionalComponent_modified, i_product, i_control)
)