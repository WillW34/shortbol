@prefix sbol_3

# -- docs-family Layer 1 start --
# Name: Constraint
# Summary: Assert restrictions on the relative, sequence-based positions of pairs of Feature objects contained by the same parent Component.
# Description: Uses Feature objects as an intermediate object because constraints are on the specific instances of a part.
# Usage: Given a two Feature objects and restriction type, create a Constraint and add to a the hasConstraint property of a Component.
# Parameters: Template - Feature - Subject Feature of constraint, Template - Feature - Object Feature of constraint, Identifier - restriction - type of restriction places on the Component.
# -- docstring family end --

Constraint(feature_subject, feature_object, restriction)
(
  Identified(Constraint)
  subject = feature_subject
  object = feature_object
  sbol_3.<restriction> = restriction
)

Precedes(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_precedes)
)

StrictlyPrecedes(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_strictlyPrecedes)
)

Meets(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_meets)
)

Overlaps(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_overlaps)
)

Contains(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_contains)
)

StrictlyContains(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_strictlyContains)
)

Equals(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_equals)
)

Finishes(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_finishes)
)

Starts(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_starts)
)

IsDisjointFrom(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_isDisjointFrom)
)

Covers(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_covers)
)

VerifyIdentical(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_verifyIdentical)
)

Replaces(feature_subject, feature_object)              
(
  Constraint(feature_subject, feature_object, i_replaces)
)

SameOrientationAs(feature_subject, feature_object)     
(
  Constraint(feature_subject, feature_object, i_sameOrientationAs)
)

OppositeOrientationAs(feature_subject, feature_object) 
(
  Constraint(feature_subject, feature_object, i_oppositeOrientationAs)
)

DifferentFrom(feature_subject, feature_object)         
(
  Constraint(feature_subject, feature_object, i_differentFrom)
)






